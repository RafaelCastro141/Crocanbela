// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rafael.castro.sd.ufg/ProjetoFinal/ServidorNomes/grpc/ServidorAutenticacao/ServidorAutenticacao.proto

/*
Package ServidorAutenticacao is a generated protocol buffer package.

It is generated from these files:
	rafael.castro.sd.ufg/ProjetoFinal/ServidorNomes/grpc/ServidorAutenticacao/ServidorAutenticacao.proto

It has these top-level messages:
	AutResponse
*/
package ServidorAutenticacao

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import ServidorUsuarios "rafael.castro.sd.ufg/ProjetoFinal/ServidorNomes/grpc/ServidorUsuarios"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AutResponse struct {
	Rusuario *ServidorUsuarios.RegistroUsuario `protobuf:"bytes,1,opt,name=rusuario" json:"rusuario,omitempty"`
	Message  string                            `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Error    int32                             `protobuf:"varint,3,opt,name=error" json:"error,omitempty"`
}

func (m *AutResponse) Reset()                    { *m = AutResponse{} }
func (m *AutResponse) String() string            { return proto.CompactTextString(m) }
func (*AutResponse) ProtoMessage()               {}
func (*AutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AutResponse) GetRusuario() *ServidorUsuarios.RegistroUsuario {
	if m != nil {
		return m.Rusuario
	}
	return nil
}

func (m *AutResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *AutResponse) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

func init() {
	proto.RegisterType((*AutResponse)(nil), "ServidorAutenticacao.AutResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Autenticacao service

type AutenticacaoClient interface {
	Autenticar(ctx context.Context, in *ServidorUsuarios.RegistroUsuario, opts ...grpc.CallOption) (*AutResponse, error)
}

type autenticacaoClient struct {
	cc *grpc.ClientConn
}

func NewAutenticacaoClient(cc *grpc.ClientConn) AutenticacaoClient {
	return &autenticacaoClient{cc}
}

func (c *autenticacaoClient) Autenticar(ctx context.Context, in *ServidorUsuarios.RegistroUsuario, opts ...grpc.CallOption) (*AutResponse, error) {
	out := new(AutResponse)
	err := grpc.Invoke(ctx, "/ServidorAutenticacao.Autenticacao/Autenticar", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Autenticacao service

type AutenticacaoServer interface {
	Autenticar(context.Context, *ServidorUsuarios.RegistroUsuario) (*AutResponse, error)
}

func RegisterAutenticacaoServer(s *grpc.Server, srv AutenticacaoServer) {
	s.RegisterService(&_Autenticacao_serviceDesc, srv)
}

func _Autenticacao_Autenticar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServidorUsuarios.RegistroUsuario)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutenticacaoServer).Autenticar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServidorAutenticacao.Autenticacao/Autenticar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutenticacaoServer).Autenticar(ctx, req.(*ServidorUsuarios.RegistroUsuario))
	}
	return interceptor(ctx, in, info, handler)
}

var _Autenticacao_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ServidorAutenticacao.Autenticacao",
	HandlerType: (*AutenticacaoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Autenticar",
			Handler:    _Autenticacao_Autenticar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rafael.castro.sd.ufg/ProjetoFinal/ServidorNomes/grpc/ServidorAutenticacao/ServidorAutenticacao.proto",
}

func init() {
	proto.RegisterFile("rafael.castro.sd.ufg/ProjetoFinal/ServidorNomes/grpc/ServidorAutenticacao/ServidorAutenticacao.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x90, 0x3f, 0x4f, 0xc3, 0x30,
	0x10, 0xc5, 0x09, 0xa8, 0xfc, 0xb9, 0x32, 0x59, 0x1d, 0xa2, 0x4e, 0xa1, 0x53, 0x26, 0x47, 0x2a,
	0x33, 0x43, 0x17, 0x46, 0x84, 0x0c, 0x6c, 0x2c, 0x47, 0x72, 0xb5, 0x8c, 0xda, 0x5c, 0x74, 0x67,
	0x33, 0xf1, 0xe1, 0x11, 0x04, 0x42, 0x51, 0x23, 0x31, 0x74, 0x7c, 0x3f, 0xbf, 0xa7, 0xe7, 0x77,
	0xd0, 0x08, 0xae, 0x91, 0x36, 0xb6, 0x46, 0x8d, 0xc2, 0x56, 0x1b, 0x9b, 0xd6, 0xbe, 0xba, 0x17,
	0x7e, 0xa5, 0xc8, 0xb7, 0xa1, 0xc5, 0x4d, 0xf5, 0x40, 0xf2, 0x16, 0x1a, 0x96, 0x3b, 0xde, 0x92,
	0x56, 0x5e, 0xba, 0x7a, 0x40, 0xab, 0x14, 0xa9, 0x8d, 0xa1, 0xc6, 0x1a, 0x79, 0x14, 0xda, 0x4e,
	0x38, 0xb2, 0x99, 0x8d, 0xbd, 0xcd, 0x9f, 0x0f, 0xea, 0x7e, 0xd2, 0x84, 0x12, 0x58, 0xf7, 0x40,
	0xdf, 0xb9, 0x78, 0x87, 0xe9, 0x2a, 0x45, 0x47, 0xda, 0x71, 0xab, 0x64, 0x6e, 0xe0, 0x5c, 0x52,
	0xef, 0xc8, 0xb3, 0x22, 0x2b, 0xa7, 0xcb, 0x2b, 0xbb, 0x97, 0x74, 0xe4, 0xc3, 0xe7, 0x5f, 0xbe,
	0x81, 0x1b, 0x22, 0x26, 0x87, 0xb3, 0x2d, 0xa9, 0xa2, 0xa7, 0xfc, 0xb8, 0xc8, 0xca, 0x0b, 0xf7,
	0x23, 0xcd, 0x0c, 0x26, 0x24, 0xc2, 0x92, 0x9f, 0x14, 0x59, 0x39, 0x71, 0xbd, 0x58, 0x36, 0x70,
	0xb9, 0xbb, 0xd5, 0x3c, 0x02, 0x0c, 0x5a, 0xcc, 0xff, 0xd5, 0xf3, 0x5f, 0xcb, 0x9f, 0x7b, 0xee,
	0x4c, 0x5a, 0x1c, 0xbd, 0x9c, 0x7e, 0x4d, 0xbd, 0xfe, 0x08, 0x00, 0x00, 0xff, 0xff, 0xc7, 0xe4,
	0x50, 0x42, 0xc6, 0x01, 0x00, 0x00,
}
