// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ServidorNomes.proto

/*
Package ServidorNomes is a generated protocol buffer package.

It is generated from these files:
	ServidorNomes.proto

It has these top-level messages:
	RegistroServico
	Relatorio
*/
package ServidorNomes

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegistroServico struct {
	Host    string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Porta   int32  `protobuf:"varint,2,opt,name=porta" json:"porta,omitempty"`
	Servico string `protobuf:"bytes,3,opt,name=servico" json:"servico,omitempty"`
}

func (m *RegistroServico) Reset()                    { *m = RegistroServico{} }
func (m *RegistroServico) String() string            { return proto.CompactTextString(m) }
func (*RegistroServico) ProtoMessage()               {}
func (*RegistroServico) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RegistroServico) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *RegistroServico) GetPorta() int32 {
	if m != nil {
		return m.Porta
	}
	return 0
}

func (m *RegistroServico) GetServico() string {
	if m != nil {
		return m.Servico
	}
	return ""
}

type Relatorio struct {
	Host                 string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	NumeroConexoesAtivas int32  `protobuf:"varint,2,opt,name=numero_conexoes_ativas,json=numeroConexoesAtivas" json:"numero_conexoes_ativas,omitempty"`
}

func (m *Relatorio) Reset()                    { *m = Relatorio{} }
func (m *Relatorio) String() string            { return proto.CompactTextString(m) }
func (*Relatorio) ProtoMessage()               {}
func (*Relatorio) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Relatorio) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Relatorio) GetNumeroConexoesAtivas() int32 {
	if m != nil {
		return m.NumeroConexoesAtivas
	}
	return 0
}

func init() {
	proto.RegisterType((*RegistroServico)(nil), "ServidorNomes.RegistroServico")
	proto.RegisterType((*Relatorio)(nil), "ServidorNomes.Relatorio")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Nomes service

type NomesClient interface {
	Cadastrar(ctx context.Context, in *RegistroServico, opts ...grpc.CallOption) (*RegistroServico, error)
}

type nomesClient struct {
	cc *grpc.ClientConn
}

func NewNomesClient(cc *grpc.ClientConn) NomesClient {
	return &nomesClient{cc}
}

func (c *nomesClient) Cadastrar(ctx context.Context, in *RegistroServico, opts ...grpc.CallOption) (*RegistroServico, error) {
	out := new(RegistroServico)
	err := grpc.Invoke(ctx, "/ServidorNomes.Nomes/Cadastrar", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Nomes service

type NomesServer interface {
	Cadastrar(context.Context, *RegistroServico) (*RegistroServico, error)
}

func RegisterNomesServer(s *grpc.Server, srv NomesServer) {
	s.RegisterService(&_Nomes_serviceDesc, srv)
}

func _Nomes_Cadastrar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistroServico)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NomesServer).Cadastrar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServidorNomes.Nomes/Cadastrar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NomesServer).Cadastrar(ctx, req.(*RegistroServico))
	}
	return interceptor(ctx, in, info, handler)
}

var _Nomes_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ServidorNomes.Nomes",
	HandlerType: (*NomesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Cadastrar",
			Handler:    _Nomes_Cadastrar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ServidorNomes.proto",
}

func init() { proto.RegisterFile("ServidorNomes.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 200 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x0e, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0xc9, 0x2f, 0xf2, 0xcb, 0xcf, 0x4d, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xe2, 0x45, 0x11, 0x54, 0x0a, 0xe5, 0xe2, 0x0f, 0x4a, 0x4d, 0xcf, 0x2c, 0x2e, 0x29, 0xca, 0x07,
	0x4b, 0x24, 0xe7, 0x0b, 0x09, 0x71, 0xb1, 0x64, 0xe4, 0x17, 0x97, 0x48, 0x30, 0x2a, 0x30, 0x6a,
	0x70, 0x06, 0x81, 0xd9, 0x42, 0x22, 0x5c, 0xac, 0x05, 0xf9, 0x45, 0x25, 0x89, 0x12, 0x4c, 0x0a,
	0x8c, 0x1a, 0xac, 0x41, 0x10, 0x8e, 0x90, 0x04, 0x17, 0x7b, 0x31, 0x44, 0x93, 0x04, 0x33, 0x58,
	0x31, 0x8c, 0xab, 0x14, 0xca, 0xc5, 0x19, 0x94, 0x9a, 0x93, 0x58, 0x92, 0x5f, 0x94, 0x89, 0xdd,
	0x40, 0x13, 0x2e, 0xb1, 0xbc, 0xd2, 0xdc, 0xd4, 0xa2, 0xfc, 0xf8, 0xe4, 0xfc, 0xbc, 0xd4, 0x8a,
	0xfc, 0xd4, 0xe2, 0xf8, 0xc4, 0x92, 0xcc, 0xb2, 0xc4, 0x62, 0xa8, 0x0d, 0x22, 0x10, 0x59, 0x67,
	0xa8, 0xa4, 0x23, 0x58, 0xce, 0x28, 0x8c, 0x8b, 0x15, 0xec, 0x6c, 0x21, 0x5f, 0x2e, 0x4e, 0xe7,
	0xc4, 0x94, 0xc4, 0xe2, 0x92, 0xa2, 0xc4, 0x22, 0x21, 0x39, 0x3d, 0x54, 0x8f, 0xa2, 0x79, 0x48,
	0x8a, 0x80, 0xbc, 0x12, 0x43, 0x12, 0x1b, 0x38, 0x6c, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x72, 0xea, 0x44, 0x6b, 0x32, 0x01, 0x00, 0x00,
}
